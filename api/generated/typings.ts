/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ContextModule from "../context"
import * as prisma from "../../node_modules/.prisma/client/index"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ApartmentUploadInput: { // input type
    apartment_name: string; // String!
    doors_upload?: NexusGenScalars['Upload'] | null; // Upload
    residents_upload?: NexusGenScalars['Upload'] | null; // Upload
  }
  DoorWhereUniqueInput: { // input type
    acme_id?: string | null; // String
    id?: string | null; // String
  }
  LoginInput: { // input type
    email: string; // String!
  }
  ManageDoorInput: { // input type
    door_id?: string | null; // String
    door_status: NexusGenEnums['LockInputEnum']; // LockInputEnum!
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
  DoorStatusEnum: "LOCKED" | "UNLOCKED"
  LockInputEnum: "LOCK" | "UNLOCK"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Upload: any
}

export interface NexusGenRootTypes {
  Apartment: prisma.Apartment;
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Door: prisma.Door;
  File: { // root type
    encoding?: string | null; // String
    filename?: string | null; // String
    id?: string | null; // ID
    mimetype?: string | null; // String
    path?: string | null; // String
  }
  Mutation: {};
  MyAccess: { // root type
    doors?: Array<NexusGenRootTypes['OnlineDoor'] | null> | null; // [OnlineDoor]
    me?: NexusGenRootTypes['User'] | null; // User
  }
  OnlineDoor: { // root type
    acme_id?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
    status?: NexusGenEnums['DoorStatusEnum'] | null; // DoorStatusEnum
  }
  Query: {};
  User: prisma.User;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ApartmentUploadInput: NexusGenInputs['ApartmentUploadInput'];
  DoorWhereUniqueInput: NexusGenInputs['DoorWhereUniqueInput'];
  LoginInput: NexusGenInputs['LoginInput'];
  ManageDoorInput: NexusGenInputs['ManageDoorInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
  DoorStatusEnum: NexusGenEnums['DoorStatusEnum'];
  LockInputEnum: NexusGenEnums['LockInputEnum'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Upload: NexusGenScalars['Upload'];
}

export interface NexusGenFieldTypes {
  Apartment: { // field return type
    doors: NexusGenRootTypes['Door'][]; // [Door!]!
    id: string; // String!
    name: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Door: { // field return type
    acme_id: string; // String!
    id: string; // String!
    name: string; // String!
    residents: NexusGenRootTypes['User'][]; // [User!]!
  }
  File: { // field return type
    encoding: string | null; // String
    filename: string | null; // String
    id: string | null; // ID
    mimetype: string | null; // String
    path: string | null; // String
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    manageDoor: NexusGenRootTypes['Door'] | null; // Door
    uploadResidents: NexusGenRootTypes['Apartment'] | null; // Apartment
  }
  MyAccess: { // field return type
    doors: Array<NexusGenRootTypes['OnlineDoor'] | null> | null; // [OnlineDoor]
    me: NexusGenRootTypes['User'] | null; // User
  }
  OnlineDoor: { // field return type
    acme_id: string | null; // String
    id: string | null; // String
    name: string | null; // String
    status: NexusGenEnums['DoorStatusEnum'] | null; // DoorStatusEnum
  }
  Query: { // field return type
    apartments: Array<NexusGenRootTypes['Apartment'] | null> | null; // [Apartment]
    me: NexusGenRootTypes['MyAccess'] | null; // MyAccess
    residents: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    doors: NexusGenRootTypes['Door'][]; // [Door!]!
    email: string; // String!
    first_name: string; // String!
    id: string; // String!
    last_name: string; // String!
  }
}

export interface NexusGenArgTypes {
  Apartment: {
    doors: { // args
      after?: NexusGenInputs['DoorWhereUniqueInput'] | null; // DoorWhereUniqueInput
      before?: NexusGenInputs['DoorWhereUniqueInput'] | null; // DoorWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    users: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Door: {
    residents: { // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    manageDoor: { // args
      input: NexusGenInputs['ManageDoorInput']; // ManageDoorInput!
    }
    uploadResidents: { // args
      input: NexusGenInputs['ApartmentUploadInput']; // ApartmentUploadInput!
    }
  }
  User: {
    doors: { // args
      after?: NexusGenInputs['DoorWhereUniqueInput'] | null; // DoorWhereUniqueInput
      before?: NexusGenInputs['DoorWhereUniqueInput'] | null; // DoorWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Apartment" | "AuthPayload" | "Door" | "File" | "Mutation" | "MyAccess" | "OnlineDoor" | "Query" | "User";

export type NexusGenInputNames = "ApartmentUploadInput" | "DoorWhereUniqueInput" | "LoginInput" | "ManageDoorInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = "DoorStatusEnum" | "LockInputEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String" | "Upload";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ContextModule.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}