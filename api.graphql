### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AllCurrencyType {
  BITCOIN
  ETHEREUM
  LITECOIN
  NGNT
  USDT
}

type AuthPayload {
  token: String
  user: User
}

type BankAccount {
  account_name: String!
  bank_code: String!
  bank_name: String!
  created_at: DateTime!
  id: String!
  owner: User!
}

input BankAccountWhereUniqueInput {
  id: String
}

type Card {
  card_name: String
  expiry_month: String!
  id: String!
  last_number: String!
  owner: User!
  token: String!
  type: String!
}

input CardWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum FiatType {
  NGNT
  USDT
}

type FiatWallet {
  amount: Float!
  fiat_type: FiatType!
  id: String!
  owner: User!
  wallet_transactions(after: FiatWalletTransactionWhereUniqueInput, before: FiatWalletTransactionWhereUniqueInput, first: Int, last: Int): [FiatWalletTransaction!]!
}

type FiatWalletTransaction {
  amount: Float!
  created_at: DateTime!
  details: String!
  id: String!
  token_type: FiatType!
  type: TransactionType!
  wallet: FiatWallet!
}

input FiatWalletTransactionWhereUniqueInput {
  id: String
}

input FiatWalletWhereUniqueInput {
  id: String
}

type InstantTradeOrder {
  amount: Float!
  created_at: DateTime!
  fee: Float
  id: String!
  owner: User!
  rate: Float!
  status: OrderStatus!
  trade_type: OrderType!
  transactions(after: InstantTradeTransactionWhereUniqueInput, before: InstantTradeTransactionWhereUniqueInput, first: Int, last: Int): [InstantTradeTransaction!]!
}

input InstantTradeOrderInput {
  """How much do you want to buy or sell"""
  amount: Float!
  card_token: String

  """What fiat type are you transacting with / for"""
  fiat_type: FiatType!

  """How do you want to fund your order (escrow funds)"""
  funding_type: OrderFundingType!
  rate: Float!

  """What ftoken type are you transacting with / for"""
  token_type: TokenType!

  """What type of instant trade BUY or SELL"""
  trade_type: OrderType!
}

input InstantTradeOrderWhereUniqueInput {
  id: String
}

type InstantTradeTransaction {
  created_at: DateTime!
  details: String!
  id: String!
  status: TransactionState!
  token_type: AllCurrencyType!
  token_value: Float!
  type: TransactionType!
}

input InstantTradeTransactionWhereUniqueInput {
  id: String
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

input LoginInput {
  email: String!
  password: String!
}

type MarketData {
  BITCOIN_RATE_NGN: Float
  BITCOIN_RATE_USD: Float
  ETHEREUM_RATE_NGN: Float
  ETHEREUM_RATE_USD: Float
}

type Mutation {
  createInstantOrder(input: InstantTradeOrderInput!): InstantTradeOrder

  """make an offer for an order"""
  createOffer(
    """The offer input"""
    input: OfferInput!
  ): Offer

  """Create your order"""
  createOrder(input: OrderCreateInput!): Order
  handleOffer(input: OfferStatusInput!): Offer
  login(input: LoginInput!): AuthPayload

  """Send notification to the bitcoin wallet address for the token base"""
  notifyBitcoinWallet(input: WalletInput!): TokenWallet

  """Send tokens to a user using their username"""
  sendTokensToUser(input: WalletTransferInput!): TokenWallet
  signUp(input: SignupInput!): AuthPayload
}

type Offer {
  amount: Float!
  escrowed_value: Float!
  id: String!
  offer_type: OfferType!
  order: Order!
  status: OfferStatus
  token_type: AllCurrencyType!
}

type OfferCreatedPayload {
  mutation: String
  node: Offer
}

input OfferInput {
  """Amount to trade for the token or fiat exchange"""
  amount: Float!

  """The transaction token for a card trensfer if present"""
  card_token: String

  """How do you want to fund your order"""
  funding_type: OrderFundingType! = WALLET_FUNDING

  """What type of offer, buying or selling"""
  offer_type: OfferType!

  """Id of the order you want to make an offer on"""
  order_id: String!

  """The rate of the exchange you are proposing."""
  rate: Float!

  """what currency type are you transacting for?"""
  token_type: AllCurrencyType!
}

enum OfferStatus {
  ACCEPTED
  REJECTED
}

input OfferStatusInput {
  offer_id: String!

  """The type of order selling or buying"""
  status: OfferStatus!
}

enum OfferType {
  BUY_FROM_ORDER
  SELL_TO_ORDER
}

input OfferWhereUniqueInput {
  id: String
}

type Order {
  buyer: User
  created_at: DateTime!
  creator: User!
  escrowed_fiat_value: Float
  escrowed_token_value: Float
  fiat_fee: Float
  fiat_type: FiatType!
  fiat_value: Float!
  id: String!
  offers(after: OfferWhereUniqueInput, before: OfferWhereUniqueInput, first: Int, last: Int): [Offer!]!
  order_transactions(after: OrderTransactionWhereUniqueInput, before: OrderTransactionWhereUniqueInput, first: Int, last: Int): [OrderTransaction!]!
  order_type: OrderType!
  rate: Float!
  seller: User
  token_type: TokenType!
  token_value: Float!
}

input OrderCreateInput {
  card_token: String

  """the fiat currency you are transacting for"""
  fiat_type: FiatType! = NGNT

  """How do you want to fund your order (escrow funds)"""
  funding_type: OrderFundingType!

  """The type of order selling or buying"""
  order_type: OrderType!
  rate: Float!

  """the type of token the platform would use"""
  token_type: TokenType!
  token_value: Float!
}

enum OrderFundingType {
  CARD
  WALLET_FUNDING
}

enum OrderStatus {
  CANCELLED
  COMPLETED
  INACTIVE
  PENDING
}

type OrderTransaction {
  details: String!
  id: String!
  order: Order!
  status: TransactionState!
  token_type: AllCurrencyType!
  token_value: Float!
  type: TransactionType!
}

input OrderTransactionWhereUniqueInput {
  id: String
}

enum OrderType {
  BUY
  SELL
}

input OrderWhereUniqueInput {
  id: String
}

type Query {
  available_orders: [Order!]
  fiat_wallets: [FiatWallet!]
  marketRate: MarketData
  me: User
  token_wallets: [TokenWallet!]
  users: [User!]
}

type ResolvedAccount {
  account_name: String
  account_number: String
}

input SignupInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  phone: String!
  username: String!
}

type Subscription {
  offer_created: OfferCreatedPayload
}

enum TokenType {
  BITCOIN
  ETHEREUM
  LITECOIN
}

type TokenWallet {
  address: String
  amount: Float!
  id: String!
  owner: User!
  token_type: TokenType!
  wallet_transactions(after: TokenWalletTransactionWhereUniqueInput, before: TokenWalletTransactionWhereUniqueInput, first: Int, last: Int): [TokenWalletTransaction!]!
}

type TokenWalletTransaction {
  amount: Float!
  created_at: DateTime!
  details: String!
  id: String!
  token_type: TokenType!
  tx_hash: String
  type: TransactionType!
  wallet: TokenWallet!
}

input TokenWalletTransactionWhereUniqueInput {
  id: String
}

input TokenWalletWhereUniqueInput {
  id: String
}

enum TransactionFlow {
  CREDIT
  DEBIT
}

enum TransactionParty {
  BUYER
  SELLER
}

enum TransactionState {
  FAILED
  PENDING
  SUCCESS
}

enum TransactionType {
  CREDIT
  DEBIT
}

type User {
  bank_accounts(after: BankAccountWhereUniqueInput, before: BankAccountWhereUniqueInput, first: Int, last: Int): [BankAccount!]!
  buyingOrders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  cards(after: CardWhereUniqueInput, before: CardWhereUniqueInput, first: Int, last: Int): [Card!]!
  createdOrders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  email: String!
  fiat_wallets(after: FiatWalletWhereUniqueInput, before: FiatWalletWhereUniqueInput, first: Int, last: Int): [FiatWallet!]!
  first_name: String!
  id: String!
  instantOrders(after: InstantTradeOrderWhereUniqueInput, before: InstantTradeOrderWhereUniqueInput, first: Int, last: Int): [InstantTradeOrder!]!
  last_name: String!
  password: String!
  phone_number: String!
  profile_image: String
  stash_account_name: String
  stash_account_no: String
  stash_account_reference: String
  stash_bank_name: String
  token_wallets(after: TokenWalletWhereUniqueInput, before: TokenWalletWhereUniqueInput, first: Int, last: Int): [TokenWallet!]!
  username: String!
  verificationcode: String!
}

input WalletInput {
  wallet_id: String!
}

input WalletTransferInput {
  naira_value: Float!
  token_value: Float!
  type: TokenType
  username: String!
  wallet_id: String!
}
